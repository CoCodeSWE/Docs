pros and cons of SDK for AI

Wit.ai
pros:
	- Open source e totalmente gratuito per tutti i lavori sia privati che pubblici.
	- Permette di sviluppare facilmente grazie ai due elementi alla base del sistema: Intents e Entities.
	- Si può sviluppare con iOS, Android, Windows Phone, Raspberry Pi, Python, C o Rust.
	- Abilità di imparare dagli utenti
	- Ritorna JSON.
cons:
	- Non ha moduli diretti di integrazione con le principali piattaforme di messaggistica (e.g Facebook Messenger)
	  ma bisogna affidarsi ad un web service API.
	- Piattaforma ancora acerba, non stabile. 
Caratteristiche Docs Wit:
	- Autenticazione tramite token OAuth2

API.ai
pros:
	- Fornisce le funzionalità di tts e stt insieme al machine learning
	- Sono presenti moduli separati per l'integrazione su Facebook e altre API di messaggistica.
	- Possono essere integrate su Amazon Echo e Microsoft Cortana.
	- Fornisce SDK per Android, iOS, Apple Watch, Node.js, Cordova, Unity, C#, Xamarin, Windows Phone, Python e JavaScript.
	- Ritorna JSON
cons:
	- Il riconoscimento vocale non è gratuito.
	- La modalità di input è solo push-to-talk, cioè non è attivabile con una keyword.
Caratteristiche Docs API:
	- Un agent è un'interfaccia di conversazione. -> E' la tua applicazione
	- facile export di un intero agent in JSON per gli altri principali AV (Alexa, Cortana...)
	- Le entità sono oggetti specifici per ogni agente(es. Agente=PizzaDomicilio, Entità=Tipo/gusto valore=capricciosa)
	- Gli intent sono le azioni dell' utente/ le intenzioni. (es. Ordinare una pizza)
	- si dividono in esmpi"" e template@ che rimandano ad altre entità
	- Bisogna inserire sia delle entità, sia delle intent d'esempio in modo che tramite il machine learning l' app capisca le nuove frasi
	- Ogni richiesta API prevede una autenticazione tramite token, ogni agente ha 2 token uno per le query dell'utente e uno per intent/entity dello sviluppaore
	- /query produce un file JSON con un azione e i parametri di questa in Get o Post(lista parametri nella documentazione)
	- /tts trasforma testo dcritto in file Wav.
	- entità di base già pronte divise per categoria, a noi possono essere utili (name,)
	- Divide 2 tipi di conversazioni: Linear Dialog e Non-Linear-Dialog
		+ Linear Dialog: semplicemente viene estratto dalla frase cio che serve e vengono inizializzati dei parametri
		+ Non Linear: 
	- Domini che possiamo usare: 
		+ Authentication per l'amministratore
		+ News
		+ 
	
	

Siri:
	- obbligo che il campo della tua app rispetti uno dei domini di sirikit nei quali sono definiti Intents.
	- Intents= intentions of the user
	- Processa frasi intere in Intetnt in modo da avere dati validi, durante la verifica dei dati si può rochiedere all' utente una conferma
	- Per creare una intent si necessita di una app iOS
	- app deve chiedere il permesso all' utente per usare SiriKit la prima volta
	- consiglio? di diveidere il codice in framework privati, per usare lo stesso codice per App e per l'estensione dell' intent
	- possibilità di registrare nuovi vocabili per utente(soprannomi rubrica, nomi album foto...) o globali
	- una volta presi i dati in ingresso e creato l'intetnt, siri controlla se sono validi, in caso negtivo riformula domande per gli attributi interessati
	- chiederà semrpre la conferma per operazioni che non hanno un punto di ritorno
	- Intents UI Extension permette di creare una custom intent che va a integrare la intent base
	- Posso creare UI Extension solo nei domini: Messaggi, PAgamenti, lettura libri, workout
	- "Pertanto, non creare un'interfaccia con i controlli o le viste che richiedono interazioni con l'utente."
	